% This file was created with JabRef 2.9.2.
% Encoding: UTF-8

@inproceedings{Vorlesung,
author = {Sebastian Höppner},
title = {},
year = {2015},
isbn = {},
publisher = {Vorlesung an der TU Dresden},
address = {Dresden},
booktitle = {Schaltkreis- und Systementwurf},
location = {},
}

@inproceedings{lambacher,
author = {},
title = {Euklidischer Algorithmus},
year = {2006},
isbn = {978-3-12-734551-3, S. 197},
publisher = {Klett Verlag},
address = {Stuttgart},
booktitle = {Mathematik für Gymnasien 5 Niedersachsen},
location = {Lambacher Schweizer},
}

@INPROCEEDINGS{8939164,
  author={Randazzo, Alessandro and Tinnirello, Ilenia},
  booktitle={2019 Sixth International Conference on Internet of Things: Systems, Management and Security (IOTSMS)}, 
  title={Kata Containers: An Emerging Architecture for Enabling MEC Services in Fast and Secure Way}, 
  year={2019},
  volume={},
  number={},
  pages={209-214},
  doi={10.1109/IOTSMS48152.2019.8939164}}


@misc{Hardware-supported-TEE,
  doi = {10.48550/ARXIV.2205.12742},
  url = {https://arxiv.org/abs/2205.12742},
  author = {Schneider, Moritz and Masti, Ramya Jayaram and Shinde, Shweta and Capkun, Srdjan and Perez, Ronald},
  keywords = {Cryptography and Security (cs.CR), Hardware Architecture (cs.AR), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {SoK: Hardware-supported Trusted Execution Environments},
  publisher = {arXiv},
  year = {2022},
  copyright = {arXiv.org perpetual, non-exclusive license}
}



@ONLINE{Execution_Environment_landscape,
  author = {TAxel Simon, Lily Sturmann},
  title = {{Current Trusted Execution Environment landscape}},
  date = {2019},
  url = {https://next.redhat.com/2019/12/02/current-trusted-execution-environment-landscape/},
  note = {Slide presentation at the WinHEC 2004},
  urldate = {2022-12-10}
}


@ARTICLE{10.3389/fcomp.2022.930741,
AUTHOR={Geppert, Tim and Deml, Stefan and Sturzenegger, David and Ebert, Nico},   
TITLE={Trusted Execution Environments: Applications and Organizational Challenges},      
JOURNAL={Frontiers in Computer Science},      
VOLUME={4},           
YEAR={2022},      
URL={https://www.frontiersin.org/articles/10.3389/fcomp.2022.930741},       
DOI={10.3389/fcomp.2022.930741},      
ISSN={2624-9898},   
ABSTRACT={A lack of trust in the providers is still a major barrier to cloud computing adoption – especially when sensitive data is involved. While current privacy-enhancing technologies, such as homomorphic encryption, can increase security, they come with a considerable performance overhead. As an alternative Trusted Executing Environment (TEE) provides trust guarantees for code execution in the cloud similar to transport layer security for data transport or advanced encryption standard algorithms for data storage. Cloud infrastructure providers like Amazon, Google, and Microsoft introduced TEEs as part of their infrastructure offerings. This review will shed light on the different technological options of TEEs, as well as give insight into organizational issues regarding their usage.}
}

@inproceedings{10.1145/2487726.2488370,
author = {Hoekstra, Matthew and Lal, Reshma and Pappachan, Pradeep and Phegade, Vinay and Del Cuvillo, Juan},
title = {Using Innovative Instructions to Create Trustworthy Software Solutions},
year = {2013},
isbn = {9781450321181},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2487726.2488370},
doi = {10.1145/2487726.2488370},
abstract = {Software developers face a number of challenges when creating applications that attempt to keep important data confidential. Even with diligent attention paid to correct software design and implementation practices, secrets can still be exposed through a single flaw in any of the privileged code on the platform, code which may have been written by thousands of developers from hundreds of organizations throughout the world. Intel is developing innovative security technology which provides the ability for software developers to maintain control of the security of sensitive code and data by creating trusted domains within applications to protect critical information during execution and at rest. This paper will describe how this technology has been effectively used in lab exercises to protect private information in applications including enterprise rights management, video chat, trusted financial transactions, and others. Examples will include both protection of local processing and the establishment of secure communication with cloud services. It will illustrate useful software design patterns that can be followed to create many additional types of trusted software solutions.},
booktitle = {Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy},
articleno = {11},
numpages = {1},
location = {Tel-Aviv, Israel},
series = {HASP '13}
}

@article{DBLP:journals/corr/abs-2303-15540,
  author       = {Pau{-}Chen Cheng and
                  Wojciech Ozga and
                  Enriquillo Valdez and
                  Salman Ahmed and
                  Zhongshu Gu and
                  Hani Jamjoom and
                  Hubertus Franke and
                  James Bottomley},
  title        = {Intel {TDX} Demystified: {A} Top-Down Approach},
  journal      = {CoRR},
  volume       = {abs/2303.15540},
  year         = {2023},
  url          = {https://doi.org/10.48550/arXiv.2303.15540},
  doi          = {10.48550/arXiv.2303.15540},
  eprinttype    = {arXiv},
  eprint       = {2303.15540},
  timestamp    = {Fri, 14 Apr 2023 17:38:15 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2303-15540.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}






@article{10.1145/2499368.2451167,
author = {Madhavapeddy, Anil and Mortier, Richard and Rotsos, Charalampos and Scott, David and Singh, Balraj and Gazagnaire, Thomas and Smith, Steven and Hand, Steven and Crowcroft, Jon},
title = {Unikernels: Library Operating Systems for the Cloud},
year = {2013},
issue_date = {April 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {4},
issn = {0362-1340},
url = {https://doi.org/10.1145/2499368.2451167},
doi = {10.1145/2499368.2451167},
abstract = {We present unikernels, a new approach to deploying cloud services via applications written in high-level source code. Unikernels are single-purpose appliances that are compile-time specialised into standalone kernels, and sealed against modification when deployed to a cloud platform. In return they offer significant reduction in image sizes, improved efficiency and security, and should reduce operational costs. Our Mirage prototype compiles OCaml code into unikernels that run on commodity clouds and offer an order of magnitude reduction in code size without significant performance penalty. The architecture combines static type-safety with a single address-space layout that can be made immutable via a hypervisor extension. Mirage contributes a suite of type-safe protocol libraries, and our results demonstrate that the hypervisor is a platform that overcomes the hardware compatibility issues that have made past library operating systems impractical to deploy in the real-world.},
journal = {SIGPLAN Not.},
month = {mar},
pages = {461–472},
numpages = {12},
keywords = {functional programming, hypervisor, microkernel}
}


@inproceedings{10.1145/3267809.3267845,
author = {Williams, Dan and Koller, Ricardo and Lucina, Martin and Prakash, Nikhil},
title = {Unikernels as Processes},
year = {2018},
isbn = {9781450360111},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3267809.3267845},
doi = {10.1145/3267809.3267845},
abstract = {System virtualization (e.g., the virtual machine abstraction) has been established as the de facto standard form of isolation in multi-tenant clouds. More recently, unikernels have emerged as a way to reuse VM isolation while also being lightweight by eliminating the general purpose OS (e.g., Linux) from the VM. Instead, unikernels directly run the application (linked with a library OS) on the virtual hardware. In this paper, we show that unikernels do not actually require a virtual hardware abstraction, but can achieve similar levels of isolation when running as processes by leveraging existing kernel system call whitelisting mechanisms. Moreover, we show that running unikernels as processes reduces hardware requirements, enables the use of standard process debugging and management tooling, and improves the already impressive performance that unikernels exhibit.},
booktitle = {Proceedings of the ACM Symposium on Cloud Computing},
pages = {199–211},
numpages = {13},
keywords = {virtualization, unikernels, security, cloud computing},
location = {Carlsbad, CA, USA},
series = {SoCC '18}
}
                                                                                                                                                                                  